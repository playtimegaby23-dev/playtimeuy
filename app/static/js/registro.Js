import { auth, db } from "./firebase-config.js";
import { createUserWithEmailAndPassword } from "firebase/auth";
import { doc, setDoc, serverTimestamp } from "firebase/firestore";

document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("registroForm");
    if (!form) {
        console.error("‚ùå No se encontr√≥ el formulario con id='registroForm'");
        return;
    }

    // Inputs
    const emailInput = form.querySelector("input[name='email']");
    const passInput = form.querySelector("input[name='password']");
    const confirmInput = form.querySelector("input[name='confirm_password']");
    const fullNameInput = form.querySelector("input[name='full_name']");
    const usernameInput = form.querySelector("input[name='username']");
    const dobInput = form.querySelector("input[name='dob']");
    const countryInput = form.querySelector("input[name='country']");
    const twitterInput = form.querySelector("input[name='twitter']");
    const instagramInput = form.querySelector("input[name='instagram']");
    const roleInput = form.querySelector("select[name='role']");

    // Roles permitidos
    const ROLES_VALIDOS = ["comprador", "vendedor", "creator", "admin", "promotor"];

    // A√±ade un span debajo de cada input para errores
    function setError(input, message = "") {
        let errorSpan = input.parentNode.querySelector(".error-msg");
        if (!errorSpan) {
            errorSpan = document.createElement("span");
            errorSpan.className = "error-msg text-red-500 text-xs";
            input.parentNode.appendChild(errorSpan);
        }
        errorSpan.textContent = message;
        if (message) animateError(input);
    }

    // üîπ Animaci√≥n de error
    function animateError(input) {
        input.classList.add("border-red-500", "animate-shake");
        setTimeout(() => input.classList.remove("animate-shake"), 400);
    }

    // üîπ Validaciones
    function validateEmail(input) {
        const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        const isValid = emailPattern.test(input.value.trim());
        setError(input, isValid ? "" : "Correo electr√≥nico inv√°lido");
        return isValid;
    }

    function validatePassword(input) {
        const value = input.value.trim();
        const isValid = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$/.test(value);
        setError(input, isValid ? "" : "La contrase√±a debe tener 8+ caracteres, may√∫scula, n√∫mero y s√≠mbolo");
        return isValid;
    }

    function validateConfirmPassword(passInput, confirmInput) {
        const isValid = confirmInput.value.trim() === passInput.value.trim();
        setError(confirmInput, isValid ? "" : "Las contrase√±as no coinciden");
        return isValid;
    }

    function validateRequired(input, msg = "Campo obligatorio") {
        const isValid = input.value.trim() !== "";
        setError(input, isValid ? "" : msg);
        return isValid;
    }

    function validateUsername(input) {
        const value = input.value.trim();
        const isValid = /^[a-zA-Z0-9-_]{3,15}$/.test(value);
        setError(input, isValid ? "" : "Usuario: 3-15 caracteres, letras/n√∫meros/guiones");
        return isValid;
    }

    function validateDOB(input) {
        if (!input.value) return true;
        const birthDate = new Date(input.value);
        const age = new Date().getFullYear() - birthDate.getFullYear();
        const isValid = age >= 13;
        setError(input, isValid ? "" : "Debes tener m√≠nimo 13 a√±os");
        return isValid;
    }

    function validateRole(input) {
        const isValid = ROLES_VALIDOS.includes(input.value);
        setError(input, isValid ? "" : "Rol inv√°lido");
        return isValid;
    }

    // üîπ Validaci√≥n en tiempo real
    emailInput.addEventListener("input", () => validateEmail(emailInput));
    passInput.addEventListener("input", () => validatePassword(passInput));
    confirmInput.addEventListener("input", () => validateConfirmPassword(passInput, confirmInput));
    usernameInput.addEventListener("input", () => validateUsername(usernameInput));

    // üîπ Env√≠o del formulario
    form.addEventListener("submit", async (e) => {
        e.preventDefault();

        if (
            !validateEmail(emailInput) ||
            !validatePassword(passInput) ||
            !validateConfirmPassword(passInput, confirmInput) ||
            !validateRequired(fullNameInput) ||
            !validateUsername(usernameInput) ||
            !validateDOB(dobInput) ||
            !validateRole(roleInput)
        ) {
            Swal.fire("Error", "Corrige los errores antes de continuar.", "error");
            return;
        }

        try {
            Swal.fire({
                title: "Creando tu cuenta...",
                text: "Estamos registrando tus datos",
                allowOutsideClick: false,
                didOpen: () => Swal.showLoading(),
                background: "#1f1f2e",
                color: "#fff"
            });

            // üîπ Crear usuario en Auth
            const userCredential = await createUserWithEmailAndPassword(auth, emailInput.value, passInput.value);
            const user = userCredential.user;

            // üîπ Guardar datos en Firestore
            await setDoc(doc(db, "usuarios", user.uid), {
                fullName: fullNameInput.value.trim(),
                username: usernameInput.value.trim(),
                email: emailInput.value.trim(),
                dob: dobInput.value || null,
                country: countryInput.value.trim() || null,
                twitter: twitterInput.value.trim() || null,
                instagram: instagramInput.value.trim() || null,
                role: roleInput.value,
                creadoEn: serverTimestamp()
            });

            Swal.fire({
                icon: "success",
                title: "¬°Registro exitoso!",
                text: "Tu cuenta ha sido creada correctamente.",
                background: "#1f1f2e",
                color: "#fff",
                confirmButtonColor: "#ec4899"
            }).then(() => {
                // üîπ Redirecci√≥n seg√∫n rol
                switch (roleInput.value) {
                    case "comprador": window.location.href = "/users/comprador"; break;
                    case "vendedor": window.location.href = "/users/vendedor"; break;
                    case "creator": window.location.href = "/creators/perfil_creator"; break;
                    case "admin": window.location.href = "/admin/admindashboard"; break;
                    case "promotor": window.location.href = "/users/promotor"; break;
                    default: window.location.href = "/home/index";
                }
            });

        } catch (error) {
            console.error("Error al registrar usuario:", error);

            let mensaje = "Ocurri√≥ un error inesperado.";
            switch (error.code) {
                case "auth/email-already-in-use": mensaje = "El correo ya est√° registrado."; break;
                case "auth/invalid-email": mensaje = "El correo no es v√°lido."; break;
                case "auth/weak-password": mensaje = "La contrase√±a es demasiado d√©bil."; break;
                case "auth/too-many-requests": mensaje = "Demasiados intentos, intenta m√°s tarde."; break;
                case "auth/network-request-failed": mensaje = "Error de red. Revisa tu conexi√≥n."; break;
            }

            Swal.fire({
                icon: "error",
                title: "Error al registrarse",
                text: mensaje,
                background: "#1f1f2e",
                color: "#fff",
                confirmButtonColor: "#ef4444"
            });
        }
    });
});

// üîπ Animaci√≥n Shake (CSS in JS)
const style = document.createElement("style");
style.innerHTML = `
@keyframes shake {
  0%, 100% { transform: translateX(0); }
  20%, 60% { transform: translateX(-6px); }
  40%, 80% { transform: translateX(6px); }
}
.animate-shake {
  animation: shake 0.4s;
}
`;
document.head.appendChild(style);
